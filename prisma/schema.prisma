generator client {
  provider = "prisma-client-js"
  // output = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement()) @db.Integer
  name         String
  cpf          String     @unique @db.VarChar(11)
  email        String     @unique
  phone        String     @db.VarChar(12)
  isAdmin      Boolean    @default(false) @map("is_admin") @db.Boolean
  password     String
  analyzes     Analysis[]
  logs         Log[]
  refreshToken String?    @map("refresh_token")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("users")
}

model Analysis {
  id          Int      @id @default(autoincrement()) @db.Integer
  name        String
  description String?
  status      Status   @relation(fields: [statusId], references: [id])
  statusId    Int      @default(1) @map("status_id") @db.Integer
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @map("user_id") @db.Integer
  plot        Plot[]
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("analysis")
}

model Plot {
  id          Int      @id @default(autoincrement()) @db.Integer
  name        String
  description String?
  xCoordinate Float    @map("x_coordinate") @db.DoublePrecision
  yCoordinate Float    @map("y_coordinate") @db.DoublePrecision
  status      Status   @relation(fields: [statusId], references: [id])
  statusId    Int      @default(1) @map("status_id") @db.Integer
  analysis    Analysis @relation(fields: [analysisId], references: [id])
  analysisId  Int      @map("analysis_id") @db.Integer
  phase       Phase[]
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("plot")
}

model Phase {
  id        Int       @id @default(autoincrement()) @db.Integer
  name      String
  plot      Plot      @relation(fields: [plotId], references: [id])
  plotId    Int       @map("disease_id") @db.Integer
  status    Status    @relation(fields: [statusId], references: [id])
  statusId  Int       @default(1) @map("status_id") @db.Integer
  diseases  Disease[]
  // fungicide    Fungicide    @relation(fields: [fungicideId], references: [id])
  // fungicideId  Int          @map("fungicide_id") @db.Integer
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("phase")
}

model Disease {
  id               Int            @id @default(autoincrement()) @db.Integer
  hasIncidence     Boolean?       @map("has_incidence")
  percentage       Int?           @db.Integer
  meteorology      String?
  images           DiseaseImage[]
  status           Status         @relation(fields: [statusId], references: [id])
  statusId         Int            @default(1) @map("status_id") @db.Integer
  phase            Phase          @relation(fields: [phaseId], references: [id])
  phaseId          Int            @map("plot_id") @db.Integer
  defaultDisease   DefaultDisease @relation(fields: [defaultDiseaseId], references: [id])
  defaultDiseaseId Int            @map("default_disease_id") @db.Integer
  fungicides       Fungicide[]
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt        DateTime       @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("disease")
}

model Fungicide {
  id                 Int              @id @default(autoincrement()) @db.Integer
  disease            Disease          @relation(fields: [diseaseId], references: [id])
  diseaseId          Int              @map("disease_id") @db.Integer
  status             Status           @relation(fields: [statusId], references: [id])
  statusId           Int              @default(1) @map("status_id") @db.Integer
  defaultFungicide   DefaultFungicide @relation(fields: [defaultFungicideId], references: [id])
  defaultFungicideId Int              @map("default_disease_id") @db.Integer
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt          DateTime         @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("fungicide")
}

model DiseaseImage {
  id        Int      @id @default(autoincrement()) @db.Integer
  link      String
  disease   Disease  @relation(fields: [diseaseId], references: [id])
  diseaseId Int      @map("disease_id") @db.Integer
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("phase_image")
}

model Scale {
  id          Int          @id @default(autoincrement()) @db.Integer
  name        String
  description String?
  images      ScaleImage[]
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime     @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("scale")
}

model ScaleImage {
  id         Int      @id @default(autoincrement()) @db.Integer
  link       String
  percentage Int      @db.Integer
  scale      Scale    @relation(fields: [scaleId], references: [id])
  scaleId    Int      @map("scale_id") @db.Integer
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("scale_image")
}

model Log {
  id         Int      @id @default(autoincrement()) @db.Integer
  method     String
  route      String
  payload    String
  statusCode Int      @map("status_code") @db.Integer
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int?     @map("user_id") @db.Integer
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("log")
}

model Status {
  id         Int         @id @db.Integer
  name       String
  diseases   Disease[]
  plots      Plot[]
  analyzes   Analysis[]
  phases     Phase[]
  fungicides Fungicide[]
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("status")
}

model DefaultDisease {
  id             Int                @id @db.Integer
  classification String
  culture        String
  scientificName String             @map("scientific_name")
  commonNames    String             @map("common_names")
  author         String
  description    String
  symptoms       String
  bioecology     String
  control        String
  fungicides     DefaultFungicide[]
  diseases       Disease[]
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime           @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("default_disease")
}

model DefaultFungicide {
  id                       Int              @id @db.Integer
  tradeMark                String           @map("trade_mark")
  patentHolder             String           @map("patent_holder")
  toxicologyClassification String           @map("toxicology_classification")
  ambientalClassification  String           @map("ambiental_classification")
  registerNumber           String           @map("register_number")
  cnpj                     String
  actionMethod             String           @map("action_method")
  applicationMethod        String           @map("application_method")
  compatibility            String
  packaging                String
  activeIngredients        Json             @map("active_ingredients")
  defaultDiseases          DefaultDisease[]
  fungicides               Fungicide[]
  createdAt                DateTime         @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                DateTime         @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("default_fungicide")
}
