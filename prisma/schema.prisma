generator client {
  provider = "prisma-client-js"
  // output = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement()) @db.Integer
  name      String
  cpf       String     @unique @db.VarChar(11)
  email     String     @unique
  phone     String     @db.VarChar(12)
  isAdmin   Boolean    @map("is_admin") @default(false) @db.Boolean
  password  String
  analyzes  Analysis[]
  logs      Log[]
  jwtToken  String?    @map("jwt_token")
  // jwtRefresh String?    @map("jwt_refresh")
  createdAt DateTime   @map("created_at") @default(now()) @db.Timestamptz()
  updatedAt DateTime   @map("updated_at") @updatedAt @db.Timestamptz()

  @@map("user")
}

model Analysis {
  id          Int      @id @default(autoincrement()) @db.Integer
  name        String
  description String?
  status      String   @default("Pendente")
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @map("user_id") @db.Integer
  plot        Plot[]
  createdAt DateTime   @map("created_at") @default(now()) @db.Timestamptz()
  updatedAt DateTime   @map("updated_at") @updatedAt @db.Timestamptz()

  @@map("analysis")
}

model Plot {
  id          Int       @id @default(autoincrement()) @db.Integer
  name        String
  description String?
  xCoordinate Float     @map("x_coordinate") @db.DoublePrecision
  yCoordinate Float     @map("y_coordinate") @db.DoublePrecision
  status      String    @default("Pendente")
  analysis    Analysis  @relation(fields: [analysisId], references: [id])
  analysisId  Int       @map("analysis_id") @db.Integer
  disease     Disease[]
  createdAt DateTime   @map("created_at") @default(now()) @db.Timestamptz()
  updatedAt DateTime   @map("updated_at") @updatedAt @db.Timestamptz()

  @@map("plot")
}

model Disease {
  id        Int      @id @default(autoincrement()) @db.Integer
  name      String
  status    String   @default("Pendente")
  plot      Plot     @relation(fields: [plotId], references: [id])
  plotId    Int      @map("plot_id") @db.Integer
  phases    Phase[]
  createdAt DateTime   @map("created_at") @default(now()) @db.Timestamptz()
  updatedAt DateTime   @map("updated_at") @updatedAt @db.Timestamptz()

  @@map("disease")
}

model Phase {
  id           Int          @id @default(autoincrement()) @db.Integer
  name         String
  disease      Disease      @relation(fields: [diseaseId], references: [id])
  diseaseId    Int          @map("disease_id") @db.Integer
  images       PhaseImage[]
  hasIncidence Boolean      @map("has_incidence")
  percentage   Int?         @db.Integer
  date         DateTime     @default(now()) @db.Date
  meteorology  String
  status       String       @default("Pendente")
  fungicide    Fungicide    @relation(fields: [fungicideId], references: [id])
  fungicideId  Int          @map("fungicide_id") @db.Integer
  createdAt DateTime   @map("created_at") @default(now()) @db.Timestamptz()
  updatedAt DateTime   @map("updated_at") @updatedAt @db.Timestamptz()

  @@map("phase")
}

model Fungicide {
  id          Int      @id @default(autoincrement()) @db.Integer
  name        String
  description String?
  Phase       Phase[]
  createdAt DateTime   @map("created_at") @default(now()) @db.Timestamptz()
  updatedAt DateTime   @map("updated_at") @updatedAt @db.Timestamptz()

  @@map("fungicide")
}

model PhaseImage {
  id        Int      @id @default(autoincrement()) @db.Integer
  link      String
  phase     Phase    @relation(fields: [phaseId], references: [id])
  phaseId   Int      @map("phase_id") @db.Integer
  createdAt DateTime   @map("created_at") @default(now()) @db.Timestamptz()
  updatedAt DateTime   @map("updated_at") @updatedAt @db.Timestamptz()

  @@map("phase_image")
}

model Scale {
  id          Int          @id @default(autoincrement()) @db.Integer
  name        String
  description String?
  images      ScaleImage[]
  createdAt DateTime   @map("created_at") @default(now()) @db.Timestamptz()
  updatedAt DateTime   @map("updated_at") @updatedAt @db.Timestamptz()

  @@map("scale")
}

model ScaleImage {
  id         Int      @id @default(autoincrement()) @db.Integer
  link       String
  percentage Int      @db.Integer
  scale      Scale    @relation(fields: [scaleId], references: [id])
  scaleId    Int      @map("scale_id") @db.Integer
  createdAt DateTime   @map("created_at") @default(now()) @db.Timestamptz()
  updatedAt DateTime   @map("updated_at") @updatedAt @db.Timestamptz()

  @@map("scale_image")
}

model Log {
  id        Int      @id @default(autoincrement()) @db.Integer
  method    String
  route     String
  payload   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id") @db.Integer
  createdAt DateTime   @map("created_at") @default(now()) @db.Timestamptz()

  @@map("log")
}
